shortestPathLengths[1,100]
shortestPathLengths = shortest.paths(snlgraph, c(0), mode="out")
shortestPathLengths = shortest.paths(snlgraph, c(1), mode="out")
shortest.paths(snlgraph, c(1), mode="out")
get.shortest.paths(snlgraph, from=1, mode="out")
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
snlgraph <- graph_from_adjacency_matrix(transitionMatrix>0, mode="directed")
get.shortest.paths(snlgraph, from=1, mode="out")[101]
get.shortest.paths(snlgraph, from=1, mode="out")
shortest.paths(snlgraph, c(1), mode="out")
transitionMatrix[1]
transitionMatrix[1, :]
transitionMatrix[1, ]
shortest.paths(snlgraph, c(1), mode="out")
get.shortest.paths(snlgraph, from=1, mode="out")
get.shortest.paths(snlgraph, from=1, mode="out")$vpath[[101]]
shortest_state <- rep(0, 101)
shortest_state[get.shortest.paths(snlgraph, from=1, mode="out")$vpath[[101]]]=1
shortest_state
sortest_state_mat = matrix(shortest_state[1-], nrow=10, ncol=10)
shortest_state[2,]
shortest_state[2:]
shortest_state[2:-1]
shortest_state[2:]
shortest_state[2:3]
shortest_state[2:length(shortest_state)]
sortest_state_mat = matrix(shortest_state[2:length(shortest_state)], nrow=10, ncol=10)
sortest_state_mat
image(sortest_state_mat)
image(sortest_state_mat, col=c(0, 1))
sortest_state_mat[-1,]
sortest_state_mat[nrow(sortest_state_mat):1,]
sortest_state_mat = matrix(shortest_state[1:length(shortest_state)], nrow=10, ncol=10)
shortest_state <- rep(0, 101)
shortest_state[get.shortest.paths(snlgraph, from=1, mode="out")$vpath[[101]]]=1
get.shortest.paths(snlgraph, from=1, mode="out")$vpath[[101]]
shortest_state[get.shortest.paths(snlgraph, from=1, mode="out")$vpath[[101]]]=1
shortest_state
shortest_state_mat = matrix(shortest_state[2:length(shortest_state)], nrow=10, ncol=10)
shortest_state_mat
shortest_state_mat[nrow(sortest_state_mat):1,]
shortest_state
shortest_state[2:length(shortest_state)]
shortest_state_mat = matrix(shortest_state[2:length(shortest_state)], nrow=10, ncol=10, byrow = TRUE)
shortest_state_mat[nrow(sortest_state_mat):1,]
image(shortest_state_mat[nrow(sortest_state_mat):1,], col=c(0, 1))
shortest_state_mat[nrow(sortest_state_mat):1,]
heatmap(shortest_state_mat[nrow(sortest_state_mat):1,], col=c(0,1))
image(shortest_state_mat[nrow(sortest_state_mat):1,], col=c(0, 1))
image(shortest_state_mat[nrow(shortest_state_mat):1, ncol(shortest_state_mat):1], col=c(0, 1))
image(shortest_state_mat[nrow(shortest_state_mat):1,], col=c(0, 1))
plot.matrix()
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1))
anImage <- read.jpeg("snakesnLadders.jpg")
library(rimage)
install.packages(rImage)
install.packages(rimage)
install.packages("rimage")
install.packages("imager")
install.packages("Cairo")
install.packages("Cairo")
install.packages("Cairo", keep_outputs = TRUE)
library(jpeg)
anImage <- readJPEG("snakesnLadders.jpg")
anImage <- readJPEG("snakesnLadders1.jpg")
plot(anImage)
anImage <- readJPEG("snakesnLadders1.jpg")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
grid()
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1))
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
grid()
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1), add=TRUE)
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1), add=TRUE)
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1), add=TRUE, useRaster = TRUE)
anImage <- readJPEG("snakesnLadders1.jpg")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
anImage <- readJPEG("snakesnLadders1.jpg")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
anImage <- readJPEG("snakesnLadders2.jpg")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
grid()
anImage <- readJPEG("snakesnLadders2.jpg")
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
grid()
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1), add=TRUE)
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1))
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1), add=TRUE)
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
# Set up a plot area with no plot
plot(1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
# Set up a plot area with no plot
plot(x=1:10, y=1:10, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
grid()
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1), add=TRUE)
# Set up a plot area with no plot
plot(x=1:2, y=1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
grid()
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1), add=TRUE)
# Set up a plot area with no plot
plot(x=1:5, y=1:5, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
grid()
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1), add=TRUE)
# Set up a plot area with no plot
plot(x=1:10, y=1:10, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
grid()
lim
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1), add=TRUE, xlim=1:10, ylim=1:10)
t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev))
# Set up a plot area with no plot
plot(x=1:2, y=1:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
grid()
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1), add=TRUE, xlim=1:10, ylim=1:10)
# Set up a plot area with no plot
plot(x=0:2, y=0:2, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
grid()
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1), add=TRUE, xlim=1:10, ylim=1:10)
# Set up a plot area with no plot
plot(x=0:1, y=0:1, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
grid()
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1), add=TRUE, xlim=1:10, ylim=1:10)
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(NA, 1), add=TRUE, xlim=1:10, ylim=1:10)
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(transparent, 1), add=TRUE, xlim=1:10, ylim=1:10)
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE, xlim=1:10, ylim=1:10)
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE, xlim=1:10, ylim=1:10)
get.shortest.paths(snlgraph, from=1, mode="out")$vpath[[101]]
seq(2, 10, 2)
rowsToReverse = seq(2, 10, 2)
rev(stateMat[rowsToReverse])
rev(shortestStateMat[rowsToReverse])
rev(shortest_state_mat[rowsToReverse])
shortest_state_mat
# reverse even rows so as to make matrix scan left/right
adjustStateMatrix <- function(stateMat){
rowsToReverse = seq(2, 10, 2)
for (row in rowsToReverse){
stateMat[row,] <- rev(stateMat[row,])
}
return(stateMat)
}
shortest_state <- rep(0, 101)
shortest_state[get.shortest.paths(snlgraph, from=1, mode="out")$vpath[[101]]]=1
shortest_state_mat = adjustStateMatrix(matrix(shortest_state[2:length(shortest_state)], nrow=10, ncol=10, byrow = TRUE))
anImage <- readJPEG("snakesnLadders2.jpg")
# Set up a plot area with no plot
plot(x=0:1, y=0:1, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
grid()
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c(0, 1), add=TRUE, xlim=1:10, ylim=1:10)
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE, xlim=1:10, ylim=1:10)
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE, xlim=1:10, ylim=1:10)
get.shortest.paths(snlgraph, from=1, mode="out")$vpath[[101]]
get.shortest.paths(snlgraph, from=1, mode="out")$vpath[[101]]-1
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
# Set up a plot area with no plot
plot(x=0:1, y=0:1, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
grid()
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE, xlim=1:10, ylim=1:10)
get.shortest.paths(snlgraph, from=1, mode="out")$vpath[[101]]-1
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
transitionMtrix
get.shortest.paths(snlgraph, from=1, mode="out")$vpath[[101]]-1
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
image(t(apply(shortest_state_mat[nrow(sortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE, xlim=1:10, ylim=1:10)
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE, xlim=1:10, ylim=1:10)
get.shortest.paths(snlgraph, from=1, mode="out")$vpath[[101]]-1
anImage <- readJPEG("snakesnLadders1.jpg")
# Set up a plot area with no plot
plot(x=0:1, y=0:1, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE, xlim=1:10, ylim=1:10)
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE, xlim=1:10.5, ylim=1:10.5)
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE, xlim=1:10.5, ylim=1:10.5)
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE, xlim=1:15, ylim=1:15)
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE)
# Set up a plot area with no plot
plot(x=0:1.5, y=0:1.5, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE)
# Set up a plot area with no plot
plot(x=0:1, y=0:1, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE)
rasterImage(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE)
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
rasterImage(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
rasterImage(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c(1, "transparent"), lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE)
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE)
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
One
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
# probability of winning vs. number of moves
#transitionMatrix[101, 101] <- 0
initProb <- rep(0, 101)
initProb[1] <- 1
havingWonProbs=c()
winInNProbs=c()
cumul = initProb
for (k in seq(1, 250)){
cumul <- cumul * mcSNL
#probs <- initProb * cumul
havingWonProbs <- c(havingWonProbs, cumul[101])
if (k>1){
winInNProbs <- c(winInNProbs, cumul[101]-havingWonProbs[k-1])
} else {
winInNProbs <- c(0)
}
}
# Probability of having won after N moves
plot(seq(1,250), havingWonProbs, type="l")
# Probability of winning in N moves
plot(seq(1,250), c(0, diff(havingWonProbs)), type="l")
# Extract the matrix components and fundamental matrix
mats <- extractMatrices(mcSNL)
# Set up a vector representing the intial game state with the counter off the board
One = matrix(rep(1, 100))
# Average number of moves to win
# Every element (i,j) of the fundamental matrix N is the expected number of times that
# state j is visited started from state i, therefore summing over j gives the expected
# game length starting at each state i.
avgMovesToWin <- (mats$N %*% One)[1]
cat("Average number of moves to win: ", avgMovesToWin, "\n")
# Plot the probability of having won after N moves
plot(seq(1,250), havingWonProbs, type="l")
# Plot the probability of having won after N moves
plot(seq(1,250), havingWonProbs, type="l", main="Cumulative winning probability")
# Plot the probability of having won after N moves
plot(seq(1,250), havingWonProbs, type="l", main="Cumulative winning probability", xlab="Number of moves", ylab="Probability")
# Plot the probability of winning in N moves
plot(seq(1,250), c(0, diff(havingWonProbs)), type="l", main="Winning probability", xlab="Move number", ylab="Probability")
# Acuumulate the transition matrix probabilties saving the probability of
# having reached the ending state
maxMoves <- 150
cumul = initProb
for (k in seq(1, maxMoves)){
cumul <- cumul * mcSNL
#probs <- initProb * cumul
havingWonProbs <- c(havingWonProbs, cumul[101])
if (k>1){
# The probability of winning on the kth move is the probability of having won on the kth - probability of having one on the k-1th move
winInNProbs <- c(winInNProbs, cumul[101]-havingWonProbs[k-1])
} else {
winInNProbs <- c(0)
}
}
# Plot the probability of having won after N moves
plot(seq(1,maxMoves), havingWonProbs, type="l", main="Cumulative winning probability", xlab="Number of moves", ylab="Probability")
# Acuumulate the transition matrix probabilties saving the probability of
# having reached the ending state
maxMoves <- 150
cumul = initProb
for (k in seq(1, maxMoves)){
cumul <- cumul * mcSNL
#probs <- initProb * cumul
havingWonProbs <- c(havingWonProbs, cumul[101])
if (k>1){
# The probability of winning on the kth move is the probability of having won on the kth - probability of having one on the k-1th move
winInNProbs <- c(winInNProbs, cumul[101]-havingWonProbs[k-1])
} else {
winInNProbs <- c(0)
}
}
# Plot the probability of having won after N moves
plot(seq(1,maxMoves), havingWonProbs, type="l", main="Cumulative winning probability", xlab="Number of moves", ylab="Probability")
havingWonProbs=c() # probability of having won after n moves
winInNProbs=c() # Probability of winning on the nth move
# Acuumulate the transition matrix probabilties saving the probability of
# having reached the ending state
maxMoves <- 150
cumul = initProb
for (k in seq(1, maxMoves)){
cumul <- cumul * mcSNL
#probs <- initProb * cumul
havingWonProbs <- c(havingWonProbs, cumul[101])
if (k>1){
# The probability of winning on the kth move is the probability of having won on the kth - probability of having one on the k-1th move
winInNProbs <- c(winInNProbs, cumul[101]-havingWonProbs[k-1])
} else {
winInNProbs <- c(0)
}
}
# Plot the probability of having won after N moves
plot(seq(1,maxMoves), havingWonProbs, type="l", main="Cumulative winning probability", xlab="Number of moves", ylab="Probability")
pdf(file = paste(sep="", "cumul_prob.pdf"))
plot(seq(1,maxMoves), havingWonProbs, type="l", main="Cumulative winning probability", xlab="Number of moves", ylab="Probability")
dev.off()
# Plot the probability of winning in N moves
plot(seq(1,maxMoves), c(0, diff(havingWonProbs)), type="l", main="Winning probability", xlab="Move number", ylab="Probability")
pdf(file = paste(sep="", "cumul_prob.pdf"))
plot(seq(1,maxMoves), c(0, diff(havingWonProbs)), type="l", main="Winning probability", xlab="Move number", ylab="Probability")
dev.off()
subTitle <- ""
if (finishExact) {
subTitle <- paste(subTitle, "Exact finish")
}
if (doubleRollOn6) {
subTitle <- paste(subTitle, ", re-roll on 6")
}
# Plot the probability of having won after N moves
plot(seq(1,maxMoves), havingWonProbs, type="l", main="Cumulative winning probability", xlab="Number of moves", ylab="Probability")
pdf(file = paste(sep="", "cumul_prob.pdf"))
plot(seq(1,maxMoves), havingWonProbs, type="l", main="Cumulative winning probability", xlab="Number of moves", ylab="Probability")
dev.off()
# Plot the probability of winning in N moves
plot(seq(1,maxMoves), c(0, diff(havingWonProbs)), type="l", main="Winning probability", xlab="Move number", ylab="Probability")
pdf(file = paste(sep="", "cumul_prob.pdf"))
plot(seq(1,maxMoves), c(0, diff(havingWonProbs)), type="l", main="Winning probability", xlab="Move number", ylab="Probability")
dev.off()
subTitle <- ""
fNameSuffix <- ""
if (finishExact) {
subTitle <- paste(subTitle, "Exact finish")
fNameSuffix <- paste(fNameSuffix, "_exact")
}
if (doubleRollOn6) {
subTitle <- paste(subTitle, ", re-roll on 6")
fNameSuffix <- paste(fNameSuffix, "_reroll")
}
# Plot the probability of having won after N moves
plot(seq(1,maxMoves), havingWonProbs, type="l", main="Cumulative winning probability", xlab="Number of moves", ylab="Probability")
pdf(file = paste(sep="", "cumul_prob.pdf"))
plot(seq(1,maxMoves), havingWonProbs, type="l", main="Cumulative winning probability", xlab="Number of moves", ylab="Probability")
dev.off()
# Plot the probability of winning in N moves
plot(seq(1,maxMoves), c(0, diff(havingWonProbs)), type="l", main="Winning probability", xlab="Move number", ylab="Probability")
pdf(file = paste(sep="", "cumul_prob.pdf"))
plot(seq(1,maxMoves), c(0, diff(havingWonProbs)), type="l", main="Winning probability", xlab="Move number", ylab="Probability")
dev.off()
anImage <- readJPEG("snakesnLadders3.jpg")
# Set up a plot area with no plot
plot(x=0:1, y=0:1, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE)
lim$usr[1]
lim$usr[3]
lim$usr[2]
lim$usr[4]
#rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
rasterImage(anImage, 0, 0, 1, 1)
# Set up a plot area with no plot
plot(x=0:1, y=0:1, type='n', main="", xlab="x", ylab="y")
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
#rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
rasterImage(anImage, 0, 0, 1, 1)
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE)
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE)
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), add=TRUE, xlim=lim$usr[2], ylim=lim$usr[4])
rasterImage(anImage)#, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
par(mar=rep(0,4))
# Get the plot information so the image will fill the plot box, and draw it
lim <- par()
rasterImage(anImage, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
image(t(apply(shortest_state_mat[nrow(shortest_state_mat):1,], 2, rev)), col=c("transparent", 1), axes=FALSE, add=TRUE, useRaster=TRUE)
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Eurovision/eurosim.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
winInProbs
winInNProbs
winInNProbs %*% 1:length(winInNProbs)
avgMovesToWin
# Acuumulate the transition matrix probabilties saving the probability of
# having reached the ending state
maxMoves <- 250
cumul = initProb
for (k in seq(1, maxMoves)){
cumul <- cumul * mcSNL
#probs <- initProb * cumul
havingWonProbs <- c(havingWonProbs, cumul[101])
if (k>1){
# The probability of winning on the kth move is the probability of having won on the kth - probability of having one on the k-1th move
winInNProbs <- c(winInNProbs, cumul[101]-havingWonProbs[k-1])
} else {
winInNProbs <- c(0)
}
}
avgMovesToWin
winInNProbs %*% 1:length(winInNProbs)
havingWonProbs=c() # probability of having won after n moves
winInNProbs=c() # Probability of winning on the nth move
# Acuumulate the transition matrix probabilties saving the probability of
# having reached the ending state
maxMoves <- 250
cumul = initProb
for (k in seq(1, maxMoves)){
cumul <- cumul * mcSNL
#probs <- initProb * cumul
havingWonProbs <- c(havingWonProbs, cumul[101])
if (k>1){
# The probability of winning on the kth move is the probability of having won on the kth - probability of having one on the k-1th move
winInNProbs <- c(winInNProbs, cumul[101]-havingWonProbs[k-1])
} else {
winInNProbs <- c(0)
}
}
winInNProbs %*% 1:length(winInNProbs)
avgMovesToWin
?which.min
?ceil
?ceiling
ceilig(4.5)
ceiling(4.5)
ceiling(4.2)
which.min(abs(winInNProbs-0.5))
winInNProbs
winInNProbs[17]
winInNProbs[18]
which.min(abs(havingWinProbs-0.5))
which.min(abs(havingWonProbs-0.5))
havingWonProbs[23]
havingWonProbs[22]
havingWonProbs[24]
havingWonProbs[22]
havingWonProbs[23]
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
which.min(abs(havingWonProbs-0.5))
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
which.min(abs(havingWonProbs-0.5))
which.max(winInNProbs)
winInNProbs[18:20]
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
expected.visits = mats$N[1]
plot(expected.visits)
plot(1:length(expected.visits), expected.visits)
plot(1:length(expected.visits), expected.visits)
expected.visits
expected.visits = mats$N[1,]
plot(1:length(expected.visits), expected.visits)
plot(1:length(expected.visits), expected.visits, type="l")
expected.visits = mats$N[,1]
plot(1:length(expected.visits), expected.visits, type="l")
expected.visits = mats$N[1, ]
plot(1:length(expected.visits), expected.visits, type="l")
lines(1:length(expected.visits), expected.visits, type="l", )
plot(1:length(expected.visits), expected.visits, type="l", )
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
