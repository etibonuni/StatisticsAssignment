install.packages("devtools", dependencies=TRUE)
devtools::install_github("jessevent/crypto")
install.packages("RCurl")
devtools::install_github("jessevent/crypto")
update-ca-trust
remove.packages("RCurl")
install.packages("RCurl")
devtools::install_github("jessevent/crypto")
devtools::install_github("JesseVent/crypto", )
devtools::install_github("JesseVent/crypto")
devtools::install_github("JesseVent/crypto")
install.packages("crypto", dependencies = TRUE)
install.packages(c("foreach", "rvest", "xml2", "doSNOW"), dependencies=TRUE)
install.packages("crypto", dependencies = TRUE)
devtools::install_github("JesseVent/crypto")
install.packages("githubinstall")
library(githubinstall)
githubinstall("JesseVent/crypto")
githubinstall("JesseVent/crypto")
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
setwd("~/MSc AI/Semester 2/Statistics/Assignment/Crypto/data")
setwd("~/MSc AI/Semester 2/Statistics/Assignment/Crypto")
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
View(df)
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
?plot
install.packages("reshape")
View(cast(filtereddf, date ~ name))
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
View(cast(filtereddf, date ~ name))
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
class(df$date)
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
View(cast(filtereddf, date ~ name))
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = name))
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = name))
View(filtereddf)
View(cast(filtereddf, date ~ name))
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
install.packages("egcm")
View(pivotdf)
install.packages("egcm")
View(pivotdf)
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
head(pivotdf)
egcm(pivotdf$Bitcoin, pivotdf$Ethereum)
egcm(pivotdf$Bitcoin, pivotdf$`Binance Coin`)
ccf(pivotdf$Bitcoin, pivotdf$`Binance Coin`)
ccf(pivotdf$Bitcoin, pivotdf$Ethereum)
?scale
?colMeans
View(pivotdf)
scale(pivotdf[2:])
scale(pivotdf[2:21])
pivotdf[2:21] <- scale(pivotdf[2:21])
ccf(pivotdf$Bitcoin, pivotdf$Ethereum)
ccf(pivotdf$Bitcoin, pivotdf$`Binance Coin`)
tempdf = melt(pivotdf, id.vars="date")
head(tempdf)
print(ggplot(tempdf) + geom_line(aes( x= date, value, colour=name)))
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
print(ggplot(tempdf) + geom_line(aes( x= date, value, colour=name)))
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
print(ggplot(tempdf) + geom_line(aes( x= date, value, colour=name)))
View(tempdf)
tempdf = melt(pivotdf, id.vars="date")
print(ggplot(tempdf) + geom_line(aes( x= date, value, colour=name)))
print(ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = name)))
print(ggplot(tempdf) + geom_line(aes( x= date, value, colour=name)))
print(ggplot(tempdf) + geom_line(aes( x= date, value, colour=name)))
pivotdf <- cast(filtereddf, date ~ name)
pivotdf[2:21] <- scale(pivotdf[2:21])
# Extract the top 20 currencies and take a sane date range
filtereddf <- df %>% select(name, date, ranknow, close) %>% filter(ranknow <= 2, date >= "2017-10-01")
print(ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = name)))
pivotdf <- cast(filtereddf, date ~ name)
pivotdf[2:21] <- scale(pivotdf[2:21])
pivotdf[2:col(pivotdf)] <- scale(pivotdf[2:ncol(pivotdf)])
pivotdf[2:ncol(pivotdf)] <- scale(pivotdf[2:ncol(pivotdf)])
tempdf = melt(pivotdf, id.vars="date")
print(ggplot(tempdf) + geom_line(aes( x= date, value, colour=name)))
print(ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = name)))
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
print(ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = name)))
print(ggplot(tempdf) + geom_line(aes( x= date, value, colour=name)))
ccf(pivotdf$Bitcoin, pivotdf$Ethereum)
ccf(pivotdf$Bitcoin, pivotdf$Ripple)
ccf(pivotdf$Ethereum, pivotdf$Ripple)
ccf(pivotdf$Bitcoin, pivotdf$Ripple)
ccf( pivotdf$Ripple, pivotdf$Bitcoin)
?ccf
install.packages("zoo")
zdf <- zoo(tempdf[,-1], order.by=tempdf[,1])
zdf <- zoo(pivotdf[,-1], order.by=pivotdf[,1])
View(zdf)
diff(zdf)
?zoo
View(diff(zdf))
View(pivotdf[,-1])
pivotdf[,-1]=diff(zdf)[,-1]
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
# Extract the top 20 currencies and take a sane date range
filtereddf <- df %>% select(name, date, ranknow, close) %>% filter(ranknow <= 3, date >= "2017-10-01")
print(ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = name)))
pivotdf <- cast(filtereddf, date ~ name)
pivotdf[,-1] <- scale(pivotdf[,-1])
zdf <- zoo(pivotdf[,-1], order.by=pivotdf[,1])
print(zdf)
len(zdf)
length(zdf)
len(pivotdf)
length(pivotdf)
nrow(pivotdf)
# Extract the top 20 currencies and take a sane date range
filtereddf <- df %>% select(name, date, ranknow, close) %>% filter(ranknow <= 3, date >= "2017-10-01")
print(ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = name)))
pivotdf <- cast(filtereddf, date ~ name)
nrow(pivotdf)
?diff
pivotdf <- cast(filtereddf, date ~ name)
pivotdf[,-1] <- scale(pivotdf[,-1])
zdf <- zoo(pivotdf[,-1], order.by=pivotdf[,1])
diff(zdf)
nrow(diff(zdf))
diff(zdf)[,-1]
diff(zdf)[,1]
# Extract the top 20 currencies and take a sane date range
filtereddf <- df %>% select(name, date, ranknow, close) %>% filter(ranknow <= 3, date >= "2017-10-01")
print(ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = name)))
pivotdf <- cast(filtereddf, date ~ name)
pivotdf[,-1] <- scale(pivotdf[,-1])
zdf <- zoo(pivotdf[,-1], order.by=pivotdf[,1])
diffdf=diff(zdf)
tempdf = melt(diffdf, id.vars="date")
print(ggplot(tempdf) + geom_line(aes( x= date, value, colour=name)))
# Extract the top 20 currencies and take a sane date range
filtereddf <- df %>% select(name, date, ranknow, close) %>% filter(ranknow <= 3, date >= "2017-10-01")
print(ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = name)))
pivotdf <- cast(filtereddf, date ~ name)
pivotdf[,-1] <- scale(pivotdf[,-1])
zdf <- zoo(pivotdf[,-1], order.by=pivotdf[,1])
diffdf=as.data.frame(diff(zdf))
tempdf = melt(diffdf, id.vars="date")
colnames(tempdf) <- colnames(pivotdf[,-1])
setDT(tempdf, keep.rownames = TRUE)[]
library(data.table)
setDT(tempdf, keep.rownames = TRUE)[]
colnames(tempdf) <- colnames(pivotdf)
View(diffdf)
pivotdf <- cast(filtereddf, date ~ name)
pivotdf[,-1] <- scale(pivotdf[,-1])
zdf <- zoo(pivotdf[,-1], order.by=pivotdf[,1])
diffdf=as.data.frame(diff(zdf))
setDT(tempdf, keep.rownames = TRUE)[]
colnames(tempdf) <- colnames(pivotdf)
diffdf=as.data.frame(diff(zdf))
setDT(diffdf, keep.rownames = TRUE)[]
colnames(diffdf) <- colnames(pivotdf)
tempdf = melt(diffdf, id.vars="date")
print(ggplot(tempdf) + geom_line(aes( x= date, value, colour=variable)))
print(ggplot(tempdf) + geom_line(aes( x= date, value, colour=variable)))
str(tempdf)
tempdf$date <- as.Date(tempdf$date, "%Y-%m-%d")
print(ggplot(tempdf) + geom_line(aes( x=date, value, colour=variable)))
diffdf$date <- as.Date(diffdf$date, "%Y-%m-%d")
tempdf = melt(diffdf, id.vars="date")
print(ggplot(tempdf) + geom_line(aes( x=date, value, colour=variable)))
ccf(diffdf$Bitcoin, diffdf$Ethereum)
ccf(diffdf$Bitcoin, diffdf$Ripple)
ccf(diffdf$Ethereum, diffdf$Ripple)
?ccf
transpose(diffdf[,-1])
correlationTable(transpose(diffdf[,-1]))
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
t = transpose(diffdf[,-1])
length(t)
t = diffdf[,-1]
length(t)
View(t)
t[1]
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
View(diffdf)
class(diffdf)
type(diffdf)
class(as.data.frame(diffdf))
View(as.data.frame(diffdf))
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
class(diff(zdf))
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
correlationTable = function(graphs) {
cross = matrix(nrow = row(graphs), ncol = length(graphs))
for(graph1Id in 1:length(graphs)){
graph1 = graphs[,graph1Id]
print(graph1Id)
for(graph2Id in 1:length(graphs)) {
graph2 = graphs[,graph2Id]
if(graph1Id == graph2Id){
break;
} else {
correlation = ccf(graph1, graph2)#, lag.max = 0)
print(correlation)
cross[graph1Id, graph2Id] = order(correlation$acf, decreasing = TRUE)[1]
}
}
}
cross
}
cortbl <-  correlationTable(diffdf[,-1])
correlationTable = function(graphs) {
cross = matrix(nrow = row(graphs), ncol = length(graphs))
print(cross)
for(graph1Id in 1:length(graphs)){
graph1 = graphs[,graph1Id]
print(graph1Id)
for(graph2Id in 1:length(graphs)) {
graph2 = graphs[,graph2Id]
if(graph1Id == graph2Id){
break;
} else {
correlation = ccf(graph1, graph2)#, lag.max = 0)
print(correlation)
cross[graph1Id, graph2Id] = order(correlation$acf, decreasing = TRUE)[1]
}
}
}
cross
}
cortbl <-  correlationTable(diffdf[,-1])
correlationTable = function(graphs) {
cross = matrix(nrow = row(graphs), ncol = length(graphs))
print(cross)
for(graph1Id in 1:length(graphs)){
graph1 = graphs[,graph1Id]
print(graph1Id)
for(graph2Id in 1:length(graphs)) {
graph2 = graphs[,graph2Id]
if(graph1Id == graph2Id){
break;
} else {
correlation = ccf(graph1, graph2)#, lag.max = 0)
print(correlation)
order(correlation$acf, decreasing = TRUE)
cross[graph1Id, graph2Id] = order(correlation$acf, decreasing = TRUE)[1]
}
}
}
cross
}
cortbl <-  correlationTable(diffdf[,-1])
correlationTable = function(graphs) {
cross = matrix(nrow = row(graphs), ncol = length(graphs))
print(cross)
for(graph1Id in 1:length(graphs)){
graph1 = graphs[,graph1Id]
print(graph1Id)
for(graph2Id in 1:length(graphs)) {
graph2 = graphs[,graph2Id]
if(graph1Id == graph2Id){
break;
} else {
correlation = ccf(graph1, graph2)#, lag.max = 0)
print(correlation)
print(order(correlation$acf, decreasing = TRUE))
cross[graph1Id, graph2Id] = order(correlation$acf, decreasing = TRUE)[1]
}
}
}
cross
}
cortbl <-  correlationTable(diffdf[,-1])
correlationTable = function(graphs) {
cross = matrix(nrow = row(graphs), ncol = length(graphs))
print(cross)
for(graph1Id in 1:length(graphs)){
graph1 = graphs[,graph1Id]
print(graph1Id)
for(graph2Id in 1:length(graphs)) {
graph2 = graphs[,graph2Id]
if(graph1Id == graph2Id){
break;
} else {
correlation = ccf(graph1, graph2)#, lag.max = 0)
print(correlation)
print(order(correlation$acf, decreasing = TRUE))
cortn = order(correlation$acf, decreasing = TRUE)[1]
cross[graph1Id, graph2Id] = cortn
}
}
}
cross
}
cortbl <-  correlationTable(diffdf[,-1])
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
cortbl
correlationTable = function(graphs) {
cross = matrix(nrow = length(graphs), ncol = length(graphs))
print(cross)
for(graph1Id in 1:length(graphs)){
graph1 = graphs[,graph1Id]
print(graph1Id)
for(graph2Id in 1:length(graphs)) {
graph2 = graphs[,graph2Id]
if(graph1Id == graph2Id){
break;
} else {
correlation = ccf(graph1, graph2)#, lag.max = 0)
print(correlation)
print(order(correlation$acf, decreasing = TRUE))
cortn = correlation$acf[order(correlation$acf, decreasing = TRUE)[1]]
cross[graph1Id, graph2Id] = cortn
}
}
}
return(cross)
}
cortbl <-  correlationTable(diffdf[,-1])
cortlb
cortbl
correlationTable = function(graphs) {
cross = matrix(nrow = length(graphs), ncol = length(graphs))
print(cross)
for(graph1Id in 1:length(graphs)){
graph1 = graphs[,graph1Id]
print(graph1Id)
for(graph2Id in 1:length(graphs)) {
graph2 = graphs[,graph2Id]
if(graph1Id == graph2Id){
continue;
} else {
correlation = ccf(graph1, graph2)#, lag.max = 0)
print(correlation)
print(order(correlation$acf, decreasing = TRUE))
cortn = correlation$acf[order(correlation$acf, decreasing = TRUE)[1]]
cross[graph1Id, graph2Id] = cortn
}
}
}
return(cross)
}
cortbl <-  correlationTable(diffdf[,-1])
correlationTable = function(graphs) {
cross = matrix(nrow = length(graphs), ncol = length(graphs))
print(cross)
for(graph1Id in 1:length(graphs)){
graph1 = graphs[,graph1Id]
print(graph1Id)
for(graph2Id in 1:length(graphs)) {
graph2 = graphs[,graph2Id]
if(graph1Id == graph2Id){
break;
} else {
correlation = ccf(graph1, graph2)#, lag.max = 0)
print(correlation)
print(order(correlation$acf, decreasing = TRUE))
cortn = correlation$acf[order(correlation$acf, decreasing = TRUE)[1]]
cross[graph1Id, graph2Id] = cortn
}
}
}
return(cross)
}
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
View(cortbl)
View(cortbl)
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
print(ggplot(tempdf) + geom_line(aes( x=date, value, colour=variable)))
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
print(ggplot(tempdf) + geom_line(aes( x=date, value, colour=variable)))
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
print(ggplot(tempdf) + geom_line(aes( x=date, value, colour=variable)))
print(ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = name)))
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/.active-rstudio-document')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto2.R')
plot(pivotdf[,13], pivotdf[,4])
plot(pivotdf[,2], pivotdf[,1])
plot(pivotdf[,10], pivotdf[,2])
plot(pivotdf[,19], pivotdf[,1])
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto2.R')
View(cortbl2)
plot(pivotdf[,19], pivotdf[,1])
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto2.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto2.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto1.R')
plot(pivotdf[,8], pivotdf[,1])
plot(pivotdf[,8], pivotdf[,2])
plot(pivotdf[,1], pivotdf[,8], pivotdf[,2])
source('~/MSc AI/Semester 2/Statistics/Assignment/Crypto/crypto2.R')
findCorrelated = function(orig, highCorr){
match = highCorr[highCorr[,1] == orig | highCorr[,2] == orig,]
match = as.vector(match)
match[match != orig]
}
highCorr = which(cortbl > 0.90 , arr.ind = TRUE)
match = findCorrelated(4, highCorr)
match # print 6 12 23 42 44 45  3
