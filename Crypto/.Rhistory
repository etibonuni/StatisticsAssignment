source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
setwd("~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders")
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
plot(1:length(expected.visits), expected.visits, type="l", main="Expected visits per square", sub=subTitle, xlab="Square Number", ylab="Number of visits")
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
paramMatrix = matrix(c(FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE), byRow=TRUE, nrow=2, ncol=2)
paramMatrix = matrix(c(FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE), byrow=TRUE, nrow=2, ncol=2)
paramMatrix
paramMatrix = matrix(c(FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, TRUE, TRUE), byrow=TRUE, ncol=2)
paramMatrix
paramMatrix[1,]
paramMatrix[2,]
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
source('~/MSc AI/Semester 2/Statistics/Assignment/SnakesAndLadders/snakesAndLadders.R')
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Eurovision/eurosim.R')
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Eurovision/eurosim.R')
setwd("~/MSc AI/Semester 2/Statistics/Assignment/Eurovision")
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Eurovision/eurosim.R')
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Eurovision/eurosim.R')
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Eurovision/eurosim.R')
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Eurovision/eurosim.R')
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Eurovision/eurosim.R')
debugSource('~/MSc AI/Semester 2/Statistics/Assignment/Eurovision/eurosim.R')
library(stats)
library(reshape2)
library(dplyr)
library(ggplot2)
library(zoo)
library(data.table)
library(ggcorrplot)
Sys.setlocale("LC_TIME", "en_US.UTF-8")
correlationTable = function(graphs) {
cross = matrix(nrow = length(graphs), ncol = length(graphs))
p.mat = matrix(nrow=length(graphs), ncol=length(graphs))
row.names(cross)=colnames(graphs)
colnames(cross)=colnames(graphs)
#print(cross)
for(graph1Id in 1:length(graphs)){
graph1 = graphs[,graph1Id]
#print(graph1Id)
for(graph2Id in 1:length(graphs)) {
graph2 = graphs[,graph2Id]
ccf1 = ccf(graph1, graph2, plot = FALSE, lag.max=7, na.action = na.pass)#, lag.max = 0)
ind.max <- which(abs(ccf1$acf)==max(abs(ccf1$acf)))[1]
max.cor <- ccf1$acf[ind.max]
#print(max.cor)
lag.opt <- ccf1$lag[ind.max]
#      cortn = correlation$acf[order(correlation$acf, decreasing = TRUE)[1]]
p.value <- 2 * (1 - pnorm(abs(max.cor), mean = 0, sd = 1.0/sqrt(ccf1$n.used)))
cross[graph1Id, graph2Id] <- max.cor
p.mat[graph1Id, graph2Id] <- p.value
# cor()
#   crtn <- cor.test(graph1, graph2, method = "kendall")
#   cat("p=", crtn$p.value, "\n")
#   if (crtn$p.value < 0.05){
#     cross[graph1Id, graph2Id] <- crtn$estimate
#   }
#   else{
#     cross[graph1Id, graph2Id] <- 0
#   }
}
}
return(list(corr=cross, p.mat=p.mat))
}
# correlationTable = function(graphs) {
#   #graphs[is.na(graphs)] <- 0
#   logrets<-data.frame(
#            diff(as.matrix(log(graphs)))
#        )
#   cross <- cor(x=logrets, method = "spearman", use="na.or.complete")
#   pmat <- cor_pmat(logrets)
#
#   return(list(corr=cross, p.mat=pmat))
# }
findCorrelated = function(orig, highCorr){
match = highCorr[highCorr[,1] == orig | highCorr[,2] == orig,]
match = as.vector(match)
match[match != orig]
}
extractClusters<-function(correlationTable, sig.level){
# Take off the fully correlated series (will probably be diagonal)
correlationTable.adj <- correlationTable[abs(correlationTable)!=1]
# find the highest correlation level
max.corr <- max(correlationTable.adj)
# Take the top 5th percentile
minCorr <- quantile(as.vector(correlationTable.adj), probs=c(sig.level))
highCorr <- which(correlationTable > minCorr , arr.ind = TRUE)
clusters=list()
for (origin in 1:nrow(correlationTable)){
match <- findCorrelated(origin, highCorr)
#match2 <- unique(unlist(sapply(match, findCorrelated, highCorr, simplify = T)))
clusters[[origin]]<-unique(match)
}
return(clusters)
}
df = read.csv(file="data/crypto-markets.csv", header=TRUE)
# convert the column to Date
df$date <- as.Date(df$date, "%Y-%m-%d")
# Extract the top 20 currencies and take a sane date range...
filtereddf <- df %>% select(name, date, ranknow, close) %>% filter(ranknow <= 20, date >= "2017-01-01")
setwd("~/MSc AI/Semester 2/Statistics/Assignment/Crypto")
library(stats)
library(reshape2)
library(dplyr)
library(ggplot2)
library(zoo)
library(data.table)
library(ggcorrplot)
Sys.setlocale("LC_TIME", "en_US.UTF-8")
correlationTable = function(graphs) {
cross = matrix(nrow = length(graphs), ncol = length(graphs))
p.mat = matrix(nrow=length(graphs), ncol=length(graphs))
row.names(cross)=colnames(graphs)
colnames(cross)=colnames(graphs)
#print(cross)
for(graph1Id in 1:length(graphs)){
graph1 = graphs[,graph1Id]
#print(graph1Id)
for(graph2Id in 1:length(graphs)) {
graph2 = graphs[,graph2Id]
ccf1 = ccf(graph1, graph2, plot = FALSE, lag.max=7, na.action = na.pass)#, lag.max = 0)
ind.max <- which(abs(ccf1$acf)==max(abs(ccf1$acf)))[1]
max.cor <- ccf1$acf[ind.max]
#print(max.cor)
lag.opt <- ccf1$lag[ind.max]
#      cortn = correlation$acf[order(correlation$acf, decreasing = TRUE)[1]]
p.value <- 2 * (1 - pnorm(abs(max.cor), mean = 0, sd = 1.0/sqrt(ccf1$n.used)))
cross[graph1Id, graph2Id] <- max.cor
p.mat[graph1Id, graph2Id] <- p.value
# cor()
#   crtn <- cor.test(graph1, graph2, method = "kendall")
#   cat("p=", crtn$p.value, "\n")
#   if (crtn$p.value < 0.05){
#     cross[graph1Id, graph2Id] <- crtn$estimate
#   }
#   else{
#     cross[graph1Id, graph2Id] <- 0
#   }
}
}
return(list(corr=cross, p.mat=p.mat))
}
# correlationTable = function(graphs) {
#   #graphs[is.na(graphs)] <- 0
#   logrets<-data.frame(
#            diff(as.matrix(log(graphs)))
#        )
#   cross <- cor(x=logrets, method = "spearman", use="na.or.complete")
#   pmat <- cor_pmat(logrets)
#
#   return(list(corr=cross, p.mat=pmat))
# }
findCorrelated = function(orig, highCorr){
match = highCorr[highCorr[,1] == orig | highCorr[,2] == orig,]
match = as.vector(match)
match[match != orig]
}
extractClusters<-function(correlationTable, sig.level){
# Take off the fully correlated series (will probably be diagonal)
correlationTable.adj <- correlationTable[abs(correlationTable)!=1]
# find the highest correlation level
max.corr <- max(correlationTable.adj)
# Take the top 5th percentile
minCorr <- quantile(as.vector(correlationTable.adj), probs=c(sig.level))
highCorr <- which(correlationTable > minCorr , arr.ind = TRUE)
clusters=list()
for (origin in 1:nrow(correlationTable)){
match <- findCorrelated(origin, highCorr)
#match2 <- unique(unlist(sapply(match, findCorrelated, highCorr, simplify = T)))
clusters[[origin]]<-unique(match)
}
return(clusters)
}
df = read.csv(file="data/crypto-markets.csv", header=TRUE)
# convert the column to Date
df$date <- as.Date(df$date, "%Y-%m-%d")
# Extract the top 20 currencies and take a sane date range...
filtereddf <- df %>% select(name, date, ranknow, close) %>% filter(ranknow <= 20, date >= "2017-01-01")
View(filtereddf)
# ... and plot them,
print(ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = name)))
# ... and plot them,
print(ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = name, order=ranknow)))
# ... and plot them,
print(ggplot(filtereddf, aes(order=ranknow)) + geom_line(aes(x = date, y = close, colour = name)))
# ... and plot them,
print(ggplot(filtereddf, aes(order=-ranknow)) + geom_line(aes(x = date, y = close, colour = name)))
# ... and plot them,
print(ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = reorder(name, ranknow)))
)
# Pivot the dataframe in order to process it more easily
pivotdf <- dcast(filtereddf, date ~ name, value.var="close")
# Generate the pairwise correlation table between the 20 crypto-currencies
#cortbl <-correlationTable(data.frame(scale(pivotdf[,-1])))
cortbl <-correlationTable(pivotdf[,-1])
# Plot the correlation matrix
#corrplot::corrplot(cortbl, type="lower")
print(ggcorrplot(cortbl$corr,  method="square", lab=TRUE, lab_size=2, p.mat=cortbl$p.mat)+
labs(title="Cryptopcurrency Correlation (p-value < 0.05)"))
print(ggplot(filtereddf) + geom_line(aes(x = date, y = close, colour = reorder(name, ranknow)))
)
View(pivotdf)
# Scale the values so as to be able to calculate the correlation
#pivotdf[,-1] <- scale(pivotdf[,-1])
pivotdf[,-1] <- diff(log(pivotdf[,-1]))
# Scale the values so as to be able to calculate the correlation
#pivotdf[,-1] <- scale(pivotdf[,-1])
logrets<-data.frame(
diff(as.matrix(log(pivotdf[,-1])))
)
View(logrets)
# Generate the pairwise correlation table between the 20 crypto-currencies
#cortbl <-correlationTable(data.frame(scale(pivotdf[,-1])))
#cortbl <-correlationTable(pivotdf[,-1])
cortbl <- correlationTable(logrets)
# Plot the correlation matrix
#corrplot::corrplot(cortbl, type="lower")
print(ggcorrplot(cortbl$corr,  method="square", lab=TRUE, lab_size=2, p.mat=cortbl$p.mat)+
labs(title="Cryptopcurrency Correlation (p-value < 0.05)"))
tempdf = melt(logrets, id.vars="date")
tempdf = melt(logrets)
print(ggplot(tempdf) + geom_line(aes(x = date, y = value, colour = variable)) + ggtitle(paste("Currencies correlated to", currencyNames[clusterNumber])))
View(tempdf)
print(ggplot(tempdf) + geom_line(aes( y = value, colour = variable)) + ggtitle(paste("Currencies correlated to", currencyNames[clusterNumber])))
print(ggplot(tempdf) + geom_line(aes( y = value, colour = variable)) )))
print(ggplot(tempdf) + geom_line(aes( y = value, colour = variable)) ))
print(ggplot(tempdf) + geom_line(aes( y = value, colour = variable)) )
tempdf = melt(cbind(pivotdf[,1], logrets), id.vars="date")
tempdf = melt(cbind(pivotdf[2-,1], logrets), id.vars="date")
tempdf = melt(cbind(pivotdf[-1,1], logrets), id.vars="date")
cbind(pivotdf[-1,1], logrets)
cbind(pivotdf$date[-1], logrets)
tempdf = melt(cbind(data.frame(date=pivotdf$date[-1]), logrets), id.vars="date")
print(ggplot(tempdf) + geom_line(aes(x = date, y = value, colour = variable)) + ggtitle(paste("Currencies correlated to", currencyNames[clusterNumber])))
print(ggplot(tempdf) + geom_line(aes(x = date, y = value, colour = variable))
)
tempdf = melt(cbind(data.frame(date=pivotdf$date[-1]), logrets)[,c(1,2,3)], id.vars="date")
print(ggplot(tempdf) + geom_line(aes(x = date, y = value, colour = variable))
)
# Scale the values so as to be able to calculate the correlation
#pivotdf[,-1] <- scale(pivotdf[,-1])
logrets<-data.frame(
#diff(as.matrix(log(pivotdf[,-1])))
diff(as.matrix(pivotdf[,-1]))
)
# Generate the pairwise correlation table between the 20 crypto-currencies
#cortbl <-correlationTable(data.frame(scale(pivotdf[,-1])))
#cortbl <-correlationTable(pivotdf[,-1])
cortbl <- correlationTable(logrets)
# Scale the values so as to be able to calculate the correlation
#pivotdf[,-1] <- scale(pivotdf[,-1])
logrets<-data.frame(
#diff(as.matrix(log(pivotdf[,-1])))
diff(as.matrix(pivotdf[,-1]))
)
tempdf = melt(cbind(data.frame(date=pivotdf$date[-1]), logrets)[,c(1,2,3)], id.vars="date")
print(ggplot(tempdf) + geom_line(aes(x = date, y = value, colour = variable)))
# Scale the values so as to be able to calculate the correlation
pivotdf[,-1] <- scale(pivotdf[,-1])
logrets<-data.frame(
#diff(as.matrix(log(pivotdf[,-1])))
diff(as.matrix(pivotdf[,-1]))
)
tempdf = melt(cbind(data.frame(date=pivotdf$date[-1]), logrets)[,c(1,2,3)], id.vars="date")
print(ggplot(tempdf) + geom_line(aes(x = date, y = value, colour = variable)))
# Pivot the dataframe in order to process it more easily
pivotdf <- dcast(filtereddf, date ~ name, value.var="close")
# Scale the values so as to be able to calculate the correlation
pivotdf[,-1] <- scale(pivotdf[,-1])
logrets<-data.frame(
diff(as.matrix(log(pivotdf[,-1])))
)
#tempdf = melt(cbind(data.frame(date=pivotdf$date[-1]), logrets)[,c(1,2,3)], id.vars="date")
#print(ggplot(tempdf) + geom_line(aes(x = date, y = value, colour = variable)))
# Generate the pairwise correlation table between the 20 crypto-currencies
#cortbl <-correlationTable(data.frame(scale(pivotdf[,-1])))
#cortbl <-correlationTable(pivotdf[,-1])
cortbl <- correlationTable(logrets)
# Plot the correlation matrix
#corrplot::corrplot(cortbl, type="lower")
print(ggcorrplot(cortbl$corr,  method="square", lab=TRUE, lab_size=2, p.mat=cortbl$p.mat)+
labs(title="Cryptopcurrency Correlation (p-value < 0.05)"))
plot(logrets$Monero, logrets$Dash)
plot(logrets$VeChain, logrets$IOTA)
